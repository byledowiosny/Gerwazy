var tipuesearch = {"pages":[{"text":"gerwazy Description Latest Release Examples License Developer Info Georges Tomaka","tags":"","loc":"index.html","title":" gerwazy "},{"text":"This File Depends On sourcefile~~gerwazy_module.f90~~EfferentGraph sourcefile~gerwazy_module.f90 gerwazy_module.f90 sourcefile~chdir_module.f90 chdir_module.f90 sourcefile~chdir_module.f90->sourcefile~gerwazy_module.f90 sourcefile~welcome_module.f90 welcome_module.f90 sourcefile~chdir_module.f90->sourcefile~welcome_module.f90 sourcefile~qsort_module.f90 qsort_module.f90 sourcefile~qsort_module.f90->sourcefile~gerwazy_module.f90 sourcefile~mode_module.f90 mode_module.f90 sourcefile~qsort_module.f90->sourcefile~mode_module.f90 sourcefile~mode_module.f90->sourcefile~gerwazy_module.f90 sourcefile~welcome_module.f90->sourcefile~gerwazy_module.f90 sourcefile~readline_module.f90 readline_module.f90 sourcefile~readline_module.f90->sourcefile~gerwazy_module.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules gerwazy_module Source Code gerwazy_module.f90 Source Code module gerwazy_module use chdir_module use welcome_module use readline_module use qsort_module use mode_module end module gerwazy_module","tags":"","loc":"sourcefile/gerwazy_module.f90.html","title":"gerwazy_module.f90 – gerwazy"},{"text":"Files Dependent On This One sourcefile~~qsort_module.f90~~AfferentGraph sourcefile~qsort_module.f90 qsort_module.f90 sourcefile~gerwazy_module.f90 gerwazy_module.f90 sourcefile~qsort_module.f90->sourcefile~gerwazy_module.f90 sourcefile~mode_module.f90 mode_module.f90 sourcefile~qsort_module.f90->sourcefile~mode_module.f90 sourcefile~mode_module.f90->sourcefile~gerwazy_module.f90 sourcefile~mode_high_low.f90 mode_high_low.f90 sourcefile~mode_module.f90->sourcefile~mode_high_low.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules qsort_module Source Code qsort_module.f90 Source Code !qsort_module.f90 - Compact implementation of the QuickSort algorithm. !Note: Because the function uses Fortran 90 features, its interface should be made !      explicit when using it in an actual program. This is easiest via a module. module qsort_module implicit none contains recursive function qsort_reals ( data ) result ( sorted ) real , dimension (:), intent ( in ) :: data real , dimension ( 1 : size ( data )) :: sorted if ( size ( data ) > 1 ) then sorted = & ( / qsort_reals ( pack ( data ( 2 :), data ( 2 :) > data ( 1 ) ) ), & data ( 1 ), & qsort_reals ( pack ( data ( 2 :), data ( 2 :) <= data ( 1 ) ) ) / ) else sorted = data endif end function qsort_reals end module qsort_module","tags":"","loc":"sourcefile/qsort_module.f90.html","title":"qsort_module.f90 – gerwazy"},{"text":"Files Dependent On This One sourcefile~~chdir_module.f90~~AfferentGraph sourcefile~chdir_module.f90 chdir_module.f90 sourcefile~gerwazy_module.f90 gerwazy_module.f90 sourcefile~chdir_module.f90->sourcefile~gerwazy_module.f90 sourcefile~welcome_module.f90 welcome_module.f90 sourcefile~chdir_module.f90->sourcefile~welcome_module.f90 sourcefile~welcome_module.f90->sourcefile~gerwazy_module.f90 sourcefile~gerwazy.f90 gerwazy.f90 sourcefile~welcome_module.f90->sourcefile~gerwazy.f90 sourcefile~mode_high_low.f90 mode_high_low.f90 sourcefile~welcome_module.f90->sourcefile~mode_high_low.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules chdir_module Source Code chdir_module.f90 Source Code module chdir_module implicit none interface integer function c_chdir ( path ) bind ( C , name = \"chdir\" ) use iso_c_binding character ( kind = c_char ) :: path ( * ) end function c_chdir end interface contains subroutine chdir ( path , err ) use iso_c_binding character ( * ) :: path integer , optional , intent ( out ) :: err integer :: loc_err loc_err = c_chdir ( path // c_null_char ) if ( present ( err )) err = loc_err end subroutine chdir end module chdir_module","tags":"","loc":"sourcefile/chdir_module.f90.html","title":"chdir_module.f90 – gerwazy"},{"text":"Files Dependent On This One sourcefile~~readline_module.f90~~AfferentGraph sourcefile~readline_module.f90 readline_module.f90 sourcefile~gerwazy.f90 gerwazy.f90 sourcefile~readline_module.f90->sourcefile~gerwazy.f90 sourcefile~gerwazy_module.f90 gerwazy_module.f90 sourcefile~readline_module.f90->sourcefile~gerwazy_module.f90 sourcefile~mode_high_low.f90 mode_high_low.f90 sourcefile~readline_module.f90->sourcefile~mode_high_low.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules readline_module Source Code readline_module.f90 Source Code module readline_module use iso_fortran_env implicit none contains subroutine readline ( lun , line , success ) integer , intent ( in ) :: lun character ( len = :), allocatable , intent ( out ) :: line logical , intent ( out ) :: success character ( len = 0 ) :: newline success = . true . call readline_piece_by_piece ( newline ) contains recursive subroutine readline_piece_by_piece ( newline ) character ( len =* ) :: newline character ( len = 10 ) :: piece integer :: ierr integer :: sz read ( lun , '(a)' , advance = 'no' , size = sz , iostat = ierr ) piece if ( ierr /= 0 . and . ierr /= iostat_eor ) then allocate ( character ( len = len ( newline )) :: line ) line = newline success = . false . return endif !Have we gotten to the end of the line or not? if ( sz >= len ( piece ) ) then call readline_piece_by_piece ( newline // piece ) else allocate ( character ( len = len ( newline ) + sz ) :: line ) line = newline // piece ( 1 : sz ) success = . true . endif end subroutine readline_piece_by_piece end subroutine readline end module readline_module","tags":"","loc":"sourcefile/readline_module.f90.html","title":"readline_module.f90 – gerwazy"},{"text":"This File Depends On sourcefile~~mode_module.f90~~EfferentGraph sourcefile~mode_module.f90 mode_module.f90 sourcefile~qsort_module.f90 qsort_module.f90 sourcefile~qsort_module.f90->sourcefile~mode_module.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~mode_module.f90~~AfferentGraph sourcefile~mode_module.f90 mode_module.f90 sourcefile~gerwazy_module.f90 gerwazy_module.f90 sourcefile~mode_module.f90->sourcefile~gerwazy_module.f90 sourcefile~mode_high_low.f90 mode_high_low.f90 sourcefile~mode_module.f90->sourcefile~mode_high_low.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules mode_module Source Code mode_module.f90 Source Code module mode_module use qsort_module implicit none public :: stat_mode contains !Returns the lowest (if not unique) mode. real function stat_mode ( a ) real , dimension (:), intent ( in ) :: a !ta is a copy of a; we sort ta modifying it; freq !holds the frequencies and idx the index (for ta) so that !the value appearing freq(i)-time is ta(idx(i)). real , dimension ( size ( a )) :: freq , idx real :: rs , i , tm , ml , tf select case ( size ( a ) ) case ( 0 ) return case ( 1 ) stat_mode = a ( 1 ) return case default call qsort_reals ( a ) freq = 1 idx = 0 rs = 1 do i = 2 , size ( a ) if ( a ( i - 1 ) == a ( i ) ) then freq ( rs ) = freq ( rs ) + 1 else idx ( rs ) = i - 1 rs = rs + 1 end if end do idx ( rs ) = i - 1 ml = maxloc ( freq ( 1 : rs ), 1 ) !index of the max value of freq tf = freq ( ml ) !the max frequency tm = a ( idx ( ml )) !the value with that freq stat_mode = tm end select end function stat_mode end module mode_module","tags":"","loc":"sourcefile/mode_module.f90.html","title":"mode_module.f90 – gerwazy"},{"text":"This File Depends On sourcefile~~welcome_module.f90~~EfferentGraph sourcefile~welcome_module.f90 welcome_module.f90 sourcefile~chdir_module.f90 chdir_module.f90 sourcefile~chdir_module.f90->sourcefile~welcome_module.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Files Dependent On This One sourcefile~~welcome_module.f90~~AfferentGraph sourcefile~welcome_module.f90 welcome_module.f90 sourcefile~gerwazy.f90 gerwazy.f90 sourcefile~welcome_module.f90->sourcefile~gerwazy.f90 sourcefile~gerwazy_module.f90 gerwazy_module.f90 sourcefile~welcome_module.f90->sourcefile~gerwazy_module.f90 sourcefile~mode_high_low.f90 mode_high_low.f90 sourcefile~welcome_module.f90->sourcefile~mode_high_low.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Modules welcome_module Source Code welcome_module.f90 Source Code module welcome_module use chdir_module implicit none private integer :: asset , high_frequency , low_frequency , high_low character ( len = 4 ) :: year_start , year_end integer :: io public :: welcome character ( len = 4 ), public :: year character ( len = 2 ), public :: month integer , public :: nlines contains subroutine welcome () print * , 'Welcome to Gerwazy, time series analysis.' print * , 'The base time series are the millisecond ticks data from Dukascopy Bank, CH:' print * , '\"Time \"(UTC), Ask, Bid, AskVolume, BidVolume\"' print * , 'The assets was pre-selected for high volatility and liquidity.' print * , 'Choose the number:' print * , '1 - EURUSD' print * , '2 - GBPUSD' print * , '3 - EURJPY' read * , asset if ( asset . eq . 1 ) then call chdir ( \"/home/jerzy/calculus/data/EURUSD/\" ) elseif ( asset . eq . 2 ) then call chdir ( \"/home/jerzy/calculus/data/GBPUSD/\" ) elseif ( asset . eq . 3 ) then call chdir ( \"/home/jerzy/calculus/data/EURJPY/\" ) else print * , 'The number must be equal 1,2 or 3! Please, try again.' endif print * , 'The time series are arbitrarily ranged as of high or low frequency.' print * , 'Choose the number:' print * , '1 - High' print * , '2 - Low' read * , high_low if ( high_low . eq . 1 ) then print * , 'Choose the number:' print * , '1 - Second' print * , '2 - Minute' print * , '3 - Hour' read * , high_frequency print * , 'Enter the year and month (yyyy mm):' read * , year , month call chdir ( year // '/' // month // '/' ) call count_lines () elseif ( high_low . eq . 2 ) then print * , 'Choose the number:' print * , '1 - Day' print * , '2 - Week' print * , '3 - Month' read * , low_frequency print * , 'Enter the start year and end year (yyyy yyyy):' read * , year_start , year_end call chdir ( year_start // '/' ) else print * , 'The number must be equal 1,2 or 3! Please, try again.' endif end subroutine welcome subroutine count_lines () open ( 40 , file = year // '-' // month // '-Ticks.csv' , iostat = io , status = 'old' ) if ( io /= 0 ) stop 'Cannot open file! ' nlines = 0 do read ( 40 , * , iostat = io ) if ( io /= 0 ) exit nlines = nlines + 1 end do close ( 40 ) print * , 'nlines=' , nlines end subroutine count_lines end module welcome_module","tags":"","loc":"sourcefile/welcome_module.f90.html","title":"welcome_module.f90 – gerwazy"},{"text":"This File Depends On sourcefile~~mode_high_low.f90~~EfferentGraph sourcefile~mode_high_low.f90 mode_high_low.f90 sourcefile~readline_module.f90 readline_module.f90 sourcefile~readline_module.f90->sourcefile~mode_high_low.f90 sourcefile~mode_module.f90 mode_module.f90 sourcefile~mode_module.f90->sourcefile~mode_high_low.f90 sourcefile~welcome_module.f90 welcome_module.f90 sourcefile~welcome_module.f90->sourcefile~mode_high_low.f90 sourcefile~qsort_module.f90 qsort_module.f90 sourcefile~qsort_module.f90->sourcefile~mode_module.f90 sourcefile~chdir_module.f90 chdir_module.f90 sourcefile~chdir_module.f90->sourcefile~welcome_module.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs mode_high_low Modules DATA_MODULE REAL_VECTORS Source Code mode_high_low.f90 Source Code !Module holding all the data types. module DATA_MODULE type REAL_DATA real :: value end type REAL_DATA type ( REAL_DATA ), parameter :: empty_data = REAL_DATA ( - 99 9.0 ) end module DATA_MODULE !Module defining the vector type. module REAL_VECTORS use DATA_MODULE , VECTOR_DATA => REAL_DATA , & empty_vector_data => empty_data include \"vectors.f90\" end module REAL_VECTORS program mode_high_low use readline_module use welcome_module use REAL_VECTORS use mode_module implicit none type ( VECTOR ) :: v_tick !real(8)           :: tick type ( VECTOR_DATA ) :: tick integer :: size integer :: lun logical :: success character ( len = :), allocatable :: line INTEGER FILEN PARAMETER ( FILEN = 128 ) INTEGER LNSIZE PARAMETER ( LNSIZE = 60 ) CHARACTER * ( FILEN ) KERNEL CHARACTER * ( LNSIZE ) STR DOUBLE PRECISION ET !KERNEL = 'naif0012.tls' KERNEL = '../../time/data/naif0012.tls' CALL FURNSH ( KERNEL ) integer :: time , start_time , tick_time real ( 8 ) :: volume , sigma_volume call welcome () lun = 10 open ( lun , file = year // '-' // month // '-TTV.dat' ) open ( unit = 30 , file = year // '-' // month // '-SMHLW.dat' , status = 'replace' ) STR = year // '-' // month // CALL STR2ET ( STR , ET ) !Input time converts to ET (sec past J2000). start_time = nint ( ET ) time = start_time call vector_create ( v_tick ) do call readline ( lun , line , success ) if ( . not . success ) then exit endif read ( line , * ) ET , tick , volume !Internal read, for converting from string to float tick_time = nint ( ET ) if ( tick_time . eq . time ) then call vector_append ( v_tick , tick ) sigma_volume = sigma_volume + volume elseif ( tick_time . gt . time ) then size = call vector_size ( v_tick ) if ( size > 1 ) then !========================================================================= write ( 30 , 200 ) time , call stat_mode ( v_tick ), max ( v_tick ), min ( v_tick ), sigma_volume !========================================================================= time = tick_time call vector_delete_elements ( v_tick , 1 , size ) endif endif deallocate ( line ) enddo close ( 30 ) 200 format ( i9 , \" \" , 3 f7 . 5 , \" \" , f5 . 3 ) end program mode_high_low","tags":"","loc":"sourcefile/mode_high_low.f90.html","title":"mode_high_low.f90 – gerwazy"},{"text":"This File Depends On sourcefile~~gerwazy.f90~~EfferentGraph sourcefile~gerwazy.f90 gerwazy.f90 sourcefile~readline_module.f90 readline_module.f90 sourcefile~readline_module.f90->sourcefile~gerwazy.f90 sourcefile~welcome_module.f90 welcome_module.f90 sourcefile~welcome_module.f90->sourcefile~gerwazy.f90 sourcefile~chdir_module.f90 chdir_module.f90 sourcefile~chdir_module.f90->sourcefile~welcome_module.f90 Help × Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which depends upon it. A file \n    is dependent upon another if the latter must be compiled before the former\n    can be. Programs gerwazy Modules parse_module Source Code gerwazy.f90 Source Code module parse_module integer , parameter :: MAX_LINE = 60 !determine the size of line character ( MAX_LINE ) :: parse_line contains function getArg ( n ) result ( arg ) implicit none character ( MAX_LINE ) :: arg integer :: n , i , j , count j = 0 do count = 1 , n i = j + 1 j = INDEX ( parse_line ( i :), ',' ) if ( j == 0 ) exit j = j + i - 1 end do if ( j == 0 ) then if ( count == n ) then arg = parse_line ( i :) else arg = ' ' endif else arg = parse_line ( i : j - 1 ) endif end function getArg end module parse_module program gerwazy use readline_module use parse_module use welcome_module integer :: lun logical :: success character ( len = :), allocatable :: line !CHARACTER(LEN = 23)  :: time_string !real(8)              :: ask character ( 7 ) :: ask !real(8)              :: bid character ( 7 ) :: bid !real(8)              :: askV character ( 7 ) :: askV !real(8)              :: bidV character ( 7 ) :: bidV INTEGER FILEN PARAMETER ( FILEN = 128 ) INTEGER LNSIZE PARAMETER ( LNSIZE = 60 ) CHARACTER * ( FILEN ) KERNEL CHARACTER * ( LNSIZE ) STR DOUBLE PRECISION ET !KERNEL = 'naif0012.tls' KERNEL = '../../time/data/naif0012.tls' CALL FURNSH ( KERNEL ) call welcome () lun = 10 !open( lun, file = '2016-01-Ticks.csv' ) open ( lun , file = year // '-' // month // '-Ticks.csv' ) open ( unit = 30 , file = year // '-' // month // '-TTV.dat' , status = 'replace' ) do call readline ( lun , line , success ) if ( . not . success ) then exit endif if ( len ( line ) > 40 ) then !no headers parse_line = line !time_string = getArg(1) STR = getArg ( 1 ) CALL STR2ET ( STR , ET ) !Input time converts to ET (sec past J2000). ask = getArg ( 2 ) bid = getArg ( 3 ) askV = getArg ( 4 ) bidV = getArg ( 5 ) !write(*,*) ET, ' ', ask, ' ', askV !write(*,*) ET, ' ', bid, ' ', bidV !======================================================================= write ( 30 , 200 ) ET , ask , askV write ( 30 , 200 ) ET , bid , bidV !======================================================================= deallocate ( line ) endif enddo close ( 30 ) 200 format ( f18 . 8 , \" \" , a7 , \" \" , a7 ) end program gerwazy","tags":"","loc":"sourcefile/gerwazy.f90.html","title":"gerwazy.f90 – gerwazy"},{"text":"type, public :: REAL_DATA Variables value Components Type Visibility Attributes Name Initial real, public :: value","tags":"","loc":"type/real_data.html","title":"REAL_DATA – gerwazy "},{"text":"type, public :: VECTOR type~~vector~~InheritsGraph type~vector VECTOR VECTOR_DATA VECTOR_DATA VECTOR_DATA->type~vector data Help × Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from one derived type to another which extends\n    (inherits from) it. Dashed arrows point from a derived type to another\n    type containing it as a components, with a label listing the name(s) of\n    said component(s). Variables no_used data Components Type Visibility Attributes Name Initial integer, private :: no_used type(VECTOR_DATA), private, dimension(:), pointer :: data => null()","tags":"","loc":"type/vector.html","title":"VECTOR – gerwazy "},{"text":"public recursive function qsort_reals(data) result(sorted) Arguments Type Intent Optional Attributes Name real, intent(in), dimension(:) :: data Return Value real,\n  dimension(1:size(data)) Called By proc~~qsort_reals~~CalledByGraph proc~qsort_reals qsort_reals proc~qsort_reals->proc~qsort_reals proc~stat_mode stat_mode proc~stat_mode->proc~qsort_reals program~mode_high_low mode_high_low program~mode_high_low->proc~stat_mode Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/qsort_reals.html","title":"qsort_reals – gerwazy"},{"text":"public subroutine chdir(path, err) Uses: iso_c_binding proc~~chdir~~UsesGraph proc~chdir chdir iso_c_binding iso_c_binding iso_c_binding->proc~chdir Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Arguments Type Intent Optional Attributes Name character(len=*) :: path integer, intent(out), optional :: err Calls proc~~chdir~~CallsGraph proc~chdir chdir interface~c_chdir c_chdir proc~chdir->interface~c_chdir Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code chdir Source Code subroutine chdir ( path , err ) use iso_c_binding character ( * ) :: path integer , optional , intent ( out ) :: err integer :: loc_err loc_err = c_chdir ( path // c_null_char ) if ( present ( err )) err = loc_err end subroutine chdir","tags":"","loc":"proc/chdir.html","title":"chdir – gerwazy"},{"text":"interface Called By interface~~c_chdir~~CalledByGraph interface~c_chdir c_chdir proc~chdir chdir proc~chdir->interface~c_chdir Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. public function c_chdir(path) bind(C,name=\"chdir\") Arguments Type Intent Optional Attributes Name character(kind=c_char) :: path (*) Return Value integer","tags":"","loc":"interface/c_chdir.html","title":"c_chdir – gerwazy"},{"text":"public subroutine readline(lun, line, success) Arguments Type Intent Optional Attributes Name integer, intent(in) :: lun character(len=:), intent(out), allocatable :: line logical, intent(out) :: success Called By proc~~readline~~CalledByGraph proc~readline readline program~mode_high_low mode_high_low program~mode_high_low->proc~readline program~gerwazy gerwazy program~gerwazy->proc~readline Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code readline Source Code subroutine readline ( lun , line , success ) integer , intent ( in ) :: lun character ( len = :), allocatable , intent ( out ) :: line logical , intent ( out ) :: success character ( len = 0 ) :: newline success = . true . call readline_piece_by_piece ( newline ) contains recursive subroutine readline_piece_by_piece ( newline ) character ( len =* ) :: newline character ( len = 10 ) :: piece integer :: ierr integer :: sz read ( lun , '(a)' , advance = 'no' , size = sz , iostat = ierr ) piece if ( ierr /= 0 . and . ierr /= iostat_eor ) then allocate ( character ( len = len ( newline )) :: line ) line = newline success = . false . return endif !Have we gotten to the end of the line or not? if ( sz >= len ( piece ) ) then call readline_piece_by_piece ( newline // piece ) else allocate ( character ( len = len ( newline ) + sz ) :: line ) line = newline // piece ( 1 : sz ) success = . true . endif end subroutine readline_piece_by_piece end subroutine readline","tags":"","loc":"proc/readline.html","title":"readline – gerwazy"},{"text":"public function stat_mode(a) Arguments Type Intent Optional Attributes Name real, intent(in), dimension(:) :: a Return Value real Calls proc~~stat_mode~~CallsGraph proc~stat_mode stat_mode proc~qsort_reals qsort_reals proc~stat_mode->proc~qsort_reals proc~qsort_reals->proc~qsort_reals Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~stat_mode~~CalledByGraph proc~stat_mode stat_mode program~mode_high_low mode_high_low program~mode_high_low->proc~stat_mode Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code stat_mode Source Code real function stat_mode ( a ) real , dimension (:), intent ( in ) :: a !ta is a copy of a; we sort ta modifying it; freq !holds the frequencies and idx the index (for ta) so that !the value appearing freq(i)-time is ta(idx(i)). real , dimension ( size ( a )) :: freq , idx real :: rs , i , tm , ml , tf select case ( size ( a ) ) case ( 0 ) return case ( 1 ) stat_mode = a ( 1 ) return case default call qsort_reals ( a ) freq = 1 idx = 0 rs = 1 do i = 2 , size ( a ) if ( a ( i - 1 ) == a ( i ) ) then freq ( rs ) = freq ( rs ) + 1 else idx ( rs ) = i - 1 rs = rs + 1 end if end do idx ( rs ) = i - 1 ml = maxloc ( freq ( 1 : rs ), 1 ) !index of the max value of freq tf = freq ( ml ) !the max frequency tm = a ( idx ( ml )) !the value with that freq stat_mode = tm end select end function stat_mode","tags":"","loc":"proc/stat_mode.html","title":"stat_mode – gerwazy"},{"text":"public subroutine welcome() Arguments None Calls proc~~welcome~~CallsGraph proc~welcome welcome proc~count_lines count_lines proc~welcome->proc~count_lines Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~welcome~~CalledByGraph proc~welcome welcome program~mode_high_low mode_high_low program~mode_high_low->proc~welcome program~gerwazy gerwazy program~gerwazy->proc~welcome Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code welcome Source Code subroutine welcome () print * , 'Welcome to Gerwazy, time series analysis.' print * , 'The base time series are the millisecond ticks data from Dukascopy Bank, CH:' print * , '\"Time \"(UTC), Ask, Bid, AskVolume, BidVolume\"' print * , 'The assets was pre-selected for high volatility and liquidity.' print * , 'Choose the number:' print * , '1 - EURUSD' print * , '2 - GBPUSD' print * , '3 - EURJPY' read * , asset if ( asset . eq . 1 ) then call chdir ( \"/home/jerzy/calculus/data/EURUSD/\" ) elseif ( asset . eq . 2 ) then call chdir ( \"/home/jerzy/calculus/data/GBPUSD/\" ) elseif ( asset . eq . 3 ) then call chdir ( \"/home/jerzy/calculus/data/EURJPY/\" ) else print * , 'The number must be equal 1,2 or 3! Please, try again.' endif print * , 'The time series are arbitrarily ranged as of high or low frequency.' print * , 'Choose the number:' print * , '1 - High' print * , '2 - Low' read * , high_low if ( high_low . eq . 1 ) then print * , 'Choose the number:' print * , '1 - Second' print * , '2 - Minute' print * , '3 - Hour' read * , high_frequency print * , 'Enter the year and month (yyyy mm):' read * , year , month call chdir ( year // '/' // month // '/' ) call count_lines () elseif ( high_low . eq . 2 ) then print * , 'Choose the number:' print * , '1 - Day' print * , '2 - Week' print * , '3 - Month' read * , low_frequency print * , 'Enter the start year and end year (yyyy yyyy):' read * , year_start , year_end call chdir ( year_start // '/' ) else print * , 'The number must be equal 1,2 or 3! Please, try again.' endif end subroutine welcome","tags":"","loc":"proc/welcome.html","title":"welcome – gerwazy"},{"text":"private subroutine count_lines() Arguments None Called By proc~~count_lines~~CalledByGraph proc~count_lines count_lines proc~welcome welcome proc~welcome->proc~count_lines program~mode_high_low mode_high_low program~mode_high_low->proc~welcome program~gerwazy gerwazy program~gerwazy->proc~welcome Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Source Code count_lines Source Code subroutine count_lines () open ( 40 , file = year // '-' // month // '-Ticks.csv' , iostat = io , status = 'old' ) if ( io /= 0 ) stop 'Cannot open file! ' nlines = 0 do read ( 40 , * , iostat = io ) if ( io /= 0 ) exit nlines = nlines + 1 end do close ( 40 ) print * , 'nlines=' , nlines end subroutine count_lines","tags":"","loc":"proc/count_lines.html","title":"count_lines – gerwazy"},{"text":"public function vector_size(vec) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec Return Value integer Called By proc~~vector_size~~CalledByGraph proc~vector_size vector_size program~mode_high_low mode_high_low program~mode_high_low->proc~vector_size Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/vector_size.html","title":"vector_size – gerwazy"},{"text":"public function vector_at(vec, n) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec integer :: n Return Value type(VECTOR_DATA)","tags":"","loc":"proc/vector_at.html","title":"vector_at – gerwazy"},{"text":"public subroutine vector_create(vec, capacity) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec integer, optional :: capacity Calls proc~~vector_create~~CallsGraph proc~vector_create vector_create proc~vector_destroy vector_destroy proc~vector_create->proc~vector_destroy Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~vector_create~~CalledByGraph proc~vector_create vector_create program~mode_high_low mode_high_low program~mode_high_low->proc~vector_create Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/vector_create.html","title":"vector_create – gerwazy"},{"text":"public subroutine vector_destroy(vec) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec Called By proc~~vector_destroy~~CalledByGraph proc~vector_destroy vector_destroy proc~vector_create vector_create proc~vector_create->proc~vector_destroy program~mode_high_low mode_high_low program~mode_high_low->proc~vector_create Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/vector_destroy.html","title":"vector_destroy – gerwazy"},{"text":"public subroutine vector_insert_empty(vec, pos, number) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec integer, intent(in) :: pos integer, intent(in) :: number Calls proc~~vector_insert_empty~~CallsGraph proc~vector_insert_empty vector_insert_empty proc~vector_increase_capacity vector_increase_capacity proc~vector_insert_empty->proc~vector_increase_capacity Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/vector_insert_empty.html","title":"vector_insert_empty – gerwazy"},{"text":"public subroutine vector_delete_elements(vec, pos, number) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec integer, intent(in) :: pos integer, intent(in) :: number Called By proc~~vector_delete_elements~~CalledByGraph proc~vector_delete_elements vector_delete_elements program~mode_high_low mode_high_low program~mode_high_low->proc~vector_delete_elements Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/vector_delete_elements.html","title":"vector_delete_elements – gerwazy"},{"text":"public subroutine vector_append(vec, data) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec type(VECTOR_DATA) :: data Calls proc~~vector_append~~CallsGraph proc~vector_append vector_append proc~vector_increase_capacity vector_increase_capacity proc~vector_append->proc~vector_increase_capacity Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Called By proc~~vector_append~~CalledByGraph proc~vector_append vector_append program~mode_high_low mode_high_low program~mode_high_low->proc~vector_append Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/vector_append.html","title":"vector_append – gerwazy"},{"text":"public subroutine vector_put(vec, n, data) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec integer :: n type(VECTOR_DATA) :: data Calls proc~~vector_put~~CallsGraph proc~vector_put vector_put proc~vector_increase_capacity vector_increase_capacity proc~vector_put->proc~vector_increase_capacity Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/vector_put.html","title":"vector_put – gerwazy"},{"text":"private subroutine vector_increase_capacity(vec, capacity) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec integer :: capacity Called By proc~~vector_increase_capacity~~CalledByGraph proc~vector_increase_capacity vector_increase_capacity proc~vector_insert_empty vector_insert_empty proc~vector_insert_empty->proc~vector_increase_capacity proc~vector_append vector_append proc~vector_append->proc~vector_increase_capacity proc~vector_put vector_put proc~vector_put->proc~vector_increase_capacity program~mode_high_low mode_high_low program~mode_high_low->proc~vector_append Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/vector_increase_capacity.html","title":"vector_increase_capacity – gerwazy"},{"text":"public function getArg(n) result(arg) Arguments Type Intent Optional Attributes Name integer :: n Return Value character(len=MAX_LINE)","tags":"","loc":"proc/getarg.html","title":"getArg – gerwazy"},{"text":"Uses: chdir_module welcome_module readline_module qsort_module mode_module module~~gerwazy_module~~UsesGraph module~gerwazy_module gerwazy_module module~readline_module readline_module module~readline_module->module~gerwazy_module module~mode_module mode_module module~mode_module->module~gerwazy_module module~qsort_module qsort_module module~qsort_module->module~gerwazy_module module~qsort_module->module~mode_module module~chdir_module chdir_module module~chdir_module->module~gerwazy_module module~welcome_module welcome_module module~chdir_module->module~welcome_module module~welcome_module->module~gerwazy_module iso_fortran_env iso_fortran_env iso_fortran_env->module~readline_module Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it.","tags":"","loc":"module/gerwazy_module.html","title":"gerwazy_module – gerwazy"},{"text":"Used By module~~qsort_module~~UsedByGraph module~qsort_module qsort_module module~gerwazy_module gerwazy_module module~qsort_module->module~gerwazy_module module~mode_module mode_module module~qsort_module->module~mode_module module~mode_module->module~gerwazy_module program~mode_high_low mode_high_low module~mode_module->program~mode_high_low Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Functions qsort_reals Functions public recursive function qsort_reals (data) result(sorted) Arguments Type Intent Optional Attributes Name real, intent(in), dimension(:) :: data Return Value real,\n  dimension(1:size(data))","tags":"","loc":"module/qsort_module.html","title":"qsort_module – gerwazy"},{"text":"Used By module~~chdir_module~~UsedByGraph module~chdir_module chdir_module module~gerwazy_module gerwazy_module module~chdir_module->module~gerwazy_module module~welcome_module welcome_module module~chdir_module->module~welcome_module module~welcome_module->module~gerwazy_module program~gerwazy gerwazy module~welcome_module->program~gerwazy program~mode_high_low mode_high_low module~welcome_module->program~mode_high_low Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Interfaces c_chdir Subroutines chdir Interfaces interface public function c_chdir (path) bind(C,name=\"chdir\") Arguments Type Intent Optional Attributes Name character(kind=c_char) :: path (*) Return Value integer Subroutines public subroutine chdir (path, err) Arguments Type Intent Optional Attributes Name character(len=*) :: path integer, intent(out), optional :: err","tags":"","loc":"module/chdir_module.html","title":"chdir_module – gerwazy"},{"text":"Uses: iso_fortran_env module~~readline_module~~UsesGraph module~readline_module readline_module iso_fortran_env iso_fortran_env iso_fortran_env->module~readline_module Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~readline_module~~UsedByGraph module~readline_module readline_module module~gerwazy_module gerwazy_module module~readline_module->module~gerwazy_module program~gerwazy gerwazy module~readline_module->program~gerwazy program~mode_high_low mode_high_low module~readline_module->program~mode_high_low Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Subroutines readline Subroutines public subroutine readline (lun, line, success) Arguments Type Intent Optional Attributes Name integer, intent(in) :: lun character(len=:), intent(out), allocatable :: line logical, intent(out) :: success","tags":"","loc":"module/readline_module.html","title":"readline_module – gerwazy"},{"text":"Uses: qsort_module module~~mode_module~~UsesGraph module~mode_module mode_module module~qsort_module qsort_module module~qsort_module->module~mode_module Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~mode_module~~UsedByGraph module~mode_module mode_module module~gerwazy_module gerwazy_module module~mode_module->module~gerwazy_module program~mode_high_low mode_high_low module~mode_module->program~mode_high_low Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Functions stat_mode Functions public function stat_mode (a) Arguments Type Intent Optional Attributes Name real, intent(in), dimension(:) :: a Return Value real","tags":"","loc":"module/mode_module.html","title":"mode_module – gerwazy"},{"text":"Uses: chdir_module module~~welcome_module~~UsesGraph module~welcome_module welcome_module module~chdir_module chdir_module module~chdir_module->module~welcome_module Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~welcome_module~~UsedByGraph module~welcome_module welcome_module module~gerwazy_module gerwazy_module module~welcome_module->module~gerwazy_module program~gerwazy gerwazy module~welcome_module->program~gerwazy program~mode_high_low mode_high_low module~welcome_module->program~mode_high_low Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables asset high_frequency low_frequency high_low year_start year_end io year month nlines Subroutines welcome count_lines Variables Type Visibility Attributes Name Initial integer, private :: asset integer, private :: high_frequency integer, private :: low_frequency integer, private :: high_low character(len=4), private :: year_start character(len=4), private :: year_end integer, private :: io character(len=4), public :: year character(len=2), public :: month integer, public :: nlines Subroutines public subroutine welcome () Arguments None private subroutine count_lines () Arguments None","tags":"","loc":"module/welcome_module.html","title":"welcome_module – gerwazy"},{"text":"Used By module~~data_module~~UsedByGraph module~data_module DATA_MODULE module~real_vectors REAL_VECTORS module~data_module->module~real_vectors program~mode_high_low mode_high_low module~real_vectors->program~mode_high_low Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables empty_data Derived Types REAL_DATA Variables Type Visibility Attributes Name Initial type( REAL_DATA ), public, parameter :: empty_data = REAL_DATA(-999.0) Derived Types type, public :: REAL_DATA Components Type Visibility Attributes Name Initial real, public :: value","tags":"","loc":"module/data_module.html","title":"DATA_MODULE – gerwazy"},{"text":"Uses: DATA_MODULE module~~real_vectors~~UsesGraph module~real_vectors REAL_VECTORS module~data_module DATA_MODULE module~data_module->module~real_vectors Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Used By module~~real_vectors~~UsedByGraph module~real_vectors REAL_VECTORS program~mode_high_low mode_high_low module~real_vectors->program~mode_high_low Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables growth_rate Derived Types VECTOR Functions vector_size vector_at Subroutines vector_create vector_destroy vector_insert_empty vector_delete_elements vector_append vector_put vector_increase_capacity Variables Type Visibility Attributes Name Initial real, private, parameter :: growth_rate = 1.1 Derived Types type, public :: VECTOR Components Type Visibility Attributes Name Initial integer, private :: no_used type(VECTOR_DATA), private, dimension(:), pointer :: data => null() Functions public function vector_size (vec) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec Return Value integer public function vector_at (vec, n) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec integer :: n Return Value type(VECTOR_DATA) Subroutines public subroutine vector_create (vec, capacity) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec integer, optional :: capacity public subroutine vector_destroy (vec) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec public subroutine vector_insert_empty (vec, pos, number) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec integer, intent(in) :: pos integer, intent(in) :: number public subroutine vector_delete_elements (vec, pos, number) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec integer, intent(in) :: pos integer, intent(in) :: number public subroutine vector_append (vec, data) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec type(VECTOR_DATA) :: data public subroutine vector_put (vec, n, data) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec integer :: n type(VECTOR_DATA) :: data private subroutine vector_increase_capacity (vec, capacity) Arguments Type Intent Optional Attributes Name type( VECTOR ) :: vec integer :: capacity","tags":"","loc":"module/real_vectors.html","title":"REAL_VECTORS – gerwazy"},{"text":"Used By module~~parse_module~~UsedByGraph module~parse_module parse_module program~gerwazy gerwazy module~parse_module->program~gerwazy Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Variables MAX_LINE parse_line Functions getArg Variables Type Visibility Attributes Name Initial integer, public, parameter :: MAX_LINE = 60 character(len=MAX_LINE), public :: parse_line Functions public function getArg (n) result(arg) Arguments Type Intent Optional Attributes Name integer :: n Return Value character(len=MAX_LINE)","tags":"","loc":"module/parse_module.html","title":"parse_module – gerwazy"},{"text":"Uses: readline_module welcome_module REAL_VECTORS mode_module program~~mode_high_low~~UsesGraph program~mode_high_low mode_high_low module~mode_module mode_module module~mode_module->program~mode_high_low module~real_vectors REAL_VECTORS module~real_vectors->program~mode_high_low module~readline_module readline_module module~readline_module->program~mode_high_low module~welcome_module welcome_module module~welcome_module->program~mode_high_low module~qsort_module qsort_module module~qsort_module->module~mode_module module~data_module DATA_MODULE module~data_module->module~real_vectors iso_fortran_env iso_fortran_env iso_fortran_env->module~readline_module module~chdir_module chdir_module module~chdir_module->module~welcome_module Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~mode_high_low~~CallsGraph program~mode_high_low mode_high_low proc~welcome welcome program~mode_high_low->proc~welcome str2et str2et program~mode_high_low->str2et proc~vector_create vector_create program~mode_high_low->proc~vector_create proc~readline readline program~mode_high_low->proc~readline proc~vector_append vector_append program~mode_high_low->proc~vector_append proc~vector_delete_elements vector_delete_elements program~mode_high_low->proc~vector_delete_elements proc~vector_size vector_size program~mode_high_low->proc~vector_size furnsh furnsh program~mode_high_low->furnsh proc~stat_mode stat_mode program~mode_high_low->proc~stat_mode proc~count_lines count_lines proc~welcome->proc~count_lines proc~vector_destroy vector_destroy proc~vector_create->proc~vector_destroy proc~vector_increase_capacity vector_increase_capacity proc~vector_append->proc~vector_increase_capacity proc~qsort_reals qsort_reals proc~stat_mode->proc~qsort_reals proc~qsort_reals->proc~qsort_reals Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables v_tick tick size lun success line FILEN LNSIZE KERNEL STR ET time start_time tick_time volume sigma_volume Variables Type Attributes Name Initial type(VECTOR) :: v_tick type(VECTOR_DATA) :: tick integer :: size integer :: lun logical :: success character(len=:), allocatable :: line integer, parameter :: FILEN = 128 integer, parameter :: LNSIZE = 60 character(len=F) :: KERNEL character(len=L) :: STR double precision :: ET integer :: time integer :: start_time integer :: tick_time real(kind=8) :: volume real(kind=8) :: sigma_volume","tags":"","loc":"program/mode_high_low.html","title":"mode_high_low – gerwazy"},{"text":"Uses: readline_module parse_module welcome_module program~~gerwazy~~UsesGraph program~gerwazy gerwazy module~parse_module parse_module module~parse_module->program~gerwazy module~readline_module readline_module module~readline_module->program~gerwazy module~welcome_module welcome_module module~welcome_module->program~gerwazy iso_fortran_env iso_fortran_env iso_fortran_env->module~readline_module module~chdir_module chdir_module module~chdir_module->module~welcome_module Help × Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a parent (sub)module to the submodule which is\n    descended from it. Dashed arrows point from a module being used to the\n    module or program unit using it. Calls program~~gerwazy~~CallsGraph program~gerwazy gerwazy proc~welcome welcome program~gerwazy->proc~welcome str2et str2et program~gerwazy->str2et furnsh furnsh program~gerwazy->furnsh proc~readline readline program~gerwazy->proc~readline proc~count_lines count_lines proc~welcome->proc~count_lines Help × Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \n    arrows point from an interface to procedures which implement that interface.\n    This could include the module procedures in a generic interface or the\n    implementation in a submodule of an interface in a parent module. Variables lun success line ask bid askV bidV FILEN LNSIZE KERNEL STR ET Variables Type Attributes Name Initial integer :: lun logical :: success character(len=:), allocatable :: line character(len=7) :: ask character(len=7) :: bid character(len=7) :: askV character(len=7) :: bidV integer, parameter :: FILEN = 128 integer, parameter :: LNSIZE = 60 character(len=F) :: KERNEL character(len=L) :: STR double precision :: ET","tags":"","loc":"program/gerwazy.html","title":"gerwazy – gerwazy"}]}